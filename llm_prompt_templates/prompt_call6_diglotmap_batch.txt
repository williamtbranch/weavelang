You are an expert linguist creating data for a language learning application that uses diglot sentences (English sentences with some Spanish words substituted).
Your task is to process a list of "ENGLISH SENTENCES WITH ALIGNED SIMPLE SPANISH SEGMENTS". Each input entry is tagged with a unique "ID".
For each "ID", you will receive:
1.  "ENG_TEXT": The original English sentence (delimited by {{ and }}).
2.  "SimS_L3_SEGMENTS": A list of simple Spanish phrase segments (each with a "SegmentID" like S1, S2, and its "SegmentText" in {{ }}) that together translate the ENG_TEXT and are structurally aligned to it.
3.  "PHRASE_ALIGNMENTS": Explicitly shows which "EngSpan" (a part of "ENG_TEXT") corresponds to each "SimS_L3_SegmentText".
4.  "L3_SimSL_PER_SEGMENT": Provides the Spanish lemmas for each "SimS_L3_SegmentText".

Your goal is to create a DIGLOT_MAP. For EACH "SimS_L3_Segment" (and its aligned "EngSpan"):
*   Identify key English words (`EngWord`) within its "EngSpan".
*   For each `EngWord`, determine its corresponding simple Spanish lemma (`SpaLemma` - draw from "L3_SimSL_PER_SEGMENT" for that segment) and the exact simple Spanish word form (`ExactSpaForm`) that would be used in a substitution.
*   Assign a `ViabilityFlag (Y/N)`:
    *   (Y): This `EngWord`->`ExactSpaForm` is a good candidate for direct substitution into the original ENG_TEXT. This includes common content words (nouns, verbs, adjectives, adverbs) AND foundational function words (articles 'a', 'the'; prepositions 'to', 'by', 'in'; common conjunctions 'and', 'but') beneficial for early exposure. The ExactSpaForm should be simple and high-frequency.
    *   (N): NOT a good candidate. Use for:
        *   Proper Nouns (e.g., Alice->Alice(Alice)(N)).
        *   English words/phrases that don't have a simple, direct, single-word (or very short, common phrase) Spanish equivalent suitable for beginner substitution (e.g., "state-of-the-art" might be (N), or if an EngWord's best translation is a long Spanish phrase).
        *   Punctuation marks should NEVER be mapped.

Format each mapping as: `EngWord->SpaLemma(ExactSpaForm)(ViabilityFlag)`.
Combine multiple mappings for the same segment with " | " (space, pipe, space).
Output one line per original "SimS_L3_SegmentID" (S1, S2, etc.).

--- EXAMPLE OF TASK FOR ONE INPUT SENTENCE (ID: example_id_001) ---
IF THE INPUT ENTRY IS:
--- INPUT (ID: example_id_001) ---
ENG_TEXT: {{"The man was limping carefully towards the gibbet, as if he were the pirate come to life, and come down, and going back to hook himself up again."}}
SimS_L3_SEGMENTS_START::
S1::{{El hombre}}
S2::{{caminaba con cuidado}}
S3::{{a la horca,}}
S4::{{como si fuera el pirata}}
S5::{{que tenía vida otra vez,}}
S6::{{y bajó,}}
S7::{{y volvía}}
S8::{{para ponerse arriba otra vez.}}
SimS_L3_SEGMENTS_END::
PHRASE_ALIGNMENTS_START::
S1 ~ {{El hombre}} ~ {{The man}}
S2 ~ {{caminaba con cuidado}} ~ {{was limping carefully}}
S3 ~ {{a la horca,}} ~ {{towards the gibbet,}}
S4 ~ {{como si fuera el pirata}} ~ {{as if he were the pirate}}
S5 ~ {{que tenía vida otra vez,}} ~ {{come to life,}}
S6 ~ {{y bajó,}} ~ {{and come down,}}
S7 ~ {{y volvía}} ~ {{and going back}}
S8 ~ {{para ponerse arriba otra vez.}} ~ {{to hook himself up again.}}
PHRASE_ALIGNMENTS_END::
L3_SimSL_PER_SEGMENT_START::
S1::el hombre
S2::caminar con cuidado
S3::a el horca
S4::como si ser el pirata
S5::que tener vida otro vez
S6::y bajar
S7::y volver
S8::para poner se arriba otro vez
L3_SimSL_PER_SEGMENT_END::

YOUR EXPECTED OUTPUT FOR THIS "ID: example_id_001" ENTRY WOULD BE:
--- OUTPUT FOR ID: example_id_001 ---
DIGLOT_MAP_START::
S1::The->el(El)(Y) | man->hombre(hombre)(Y)
S2::was->ser(estaba)(Y) | limping->caminar(caminaba)(Y) | carefully->cuidado(con cuidado)(Y)
S3::towards->a(a)(Y) | the->el(la)(Y) | gibbet->horca(horca)(Y)
S4::as->como(como)(Y) | if->si(si)(Y) | he->él(él)(N) | were->ser(fuera)(Y) | the->el(el)(Y) | pirate->pirata(pirata)(Y)
S5::come_to_life->vida_otra_vez(tenía vida otra vez)(Y)
S6::and->y(y)(Y) | come->bajar(bajó)(Y) | down->abajo(abajo)(N)
S7::and->y(y)(Y) | going->volver(volvía)(Y) | back->atrás(atrás)(N)
S8::to->para(para)(Y) | hook->poner(ponerse)(Y) | himself->se(se)(Y) | up->arriba(arriba)(Y) | again->otra_vez(otra vez)(Y)
DIGLOT_MAP_END::
--- END OF EXAMPLE ---

--- START OF INPUT TO PROCESS ---

{batched_input_for_call6}

--- END OF INPUT TO PROCESS ---

For EACH input "ID" entry, provide your output in the structured format shown in the example.
Begin your response directly with the output for the first ID.
Ensure a blank line after DIGLOT_MAP_END:: before the next "--- OUTPUT FOR ID: ..." marker or the end of your response.